using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using UnityEngine;
// https://github.com/TeamSirenix/odin-serializer.git?path=UnityOdinSerializer –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —é–Ω–∏—Ç–∏, –æ–¥–∏–Ω –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å–µ—Ä–µ–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–∂–µ –≥–µ–π–º –æ–±–¥–∂–µ–∫—Ç—ã (—Å–æ—Ö—Ä –Ω–∞ –±—É–¥—É—â–µ–µ, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞—å–≤ —Å—Å—ã–ª–∫—É –≤ –ø–∞–∫–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä)
public static class SaveLoad // https://www.youtube.com/watch?v=1mf730eb5Wo&t=417s&ab_channel=SasquatchBStudios
{
    public static string filePath = Path.Combine(MyPaths.SAVE, "AddressableAssets.json");
    public static Dictionary<string, SaveData> saveDataDict { get; private set; } = new();

    #region saveLoad
    public static void SaveFile()
    {
        try
        {
            saveDataDict.Clear();

            EventBus.Invoke<OnSave>();

            var list = new List<SaveData>(saveDataDict.Values);
            var json = JsonConvert.SerializeObject(list);

            Directory.CreateDirectory(MyPaths.SAVE);
            File.WriteAllText(filePath, json);

            Debug.Log($"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {list.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
        }
        catch (Exception ex)
        {
            Debug.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " + ex);
        }
    }

    public static void LoadFile()
    {
        if (!File.Exists(filePath))
        {
            Debug.Log("‚ö†Ô∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        try
        {
            string json = File.ReadAllText(filePath);
            var loadedData = JsonConvert.DeserializeObject<List<SaveData>>(json);

            var dict = new Dictionary<string, SaveData>();
            foreach (var data in loadedData)
            {
                dict[data.id] = data;
            }

            EventBus.Invoke<OnLoad>();
            //saveDataDict.Clear();
        }
        catch (Exception ex)
        {
            Debug.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " + ex);
        }
    }


    public static void DeleteSave()
    {
        if (!File.Exists(filePath)) return;

        File.Delete(filePath);
        saveDataDict.Clear();

        #if UNITY_EDITOR
        Debug.Log("üóëÔ∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω");
        #endif
    }
    #endregion

    #region  reegister
    public static void Register(SaveData data)
    {
        saveDataDict[data.id] = data;
    }

    public static void UnRegister(SaveData data)
    {
        saveDataDict.Remove(data.id);
    }
    #endregion

    #region Dict func
    public static bool TryGetData(string id, out SaveData data)
    {
        return saveDataDict.TryGetValue(id, out data);
    }
    #endregion 
}
